2025-01-08 08:56:47 | [CL_point_env] Logging to /Users/paulnitschke/Desktop/projects/geo_meta_rl/data/local/experiment/CL_point_env_22


Failed to import TF-Keras. Please note that TF-Keras is not installed by default when you install TensorFlow Probability. This is so that JAX-only users do not have to install TensorFlow or TF-Keras. To use TensorFlow Probability with TensorFlow, please install the tf-keras or tf-keras-nightly package.
This can be be done through installing the tensorflow-probability[tf] extra.
/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/experiment/deterministic.py:36: UserWarning: Enabeling deterministic mode in PyTorch can have a performance impact when using GPU.
  warnings.warn(


2025-01-08 08:56:47 | [CL_point_env] Obtaining samples...
/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/distributions/distribution.py:53: UserWarning: <class 'garage.torch.distributions.tanh_normal.TanhNormal'> does not define `arg_constraints`. Please set `arg_constraints = {}` or initialize the distribution with `validate_args=False` to turn off validation.
  warnings.warn(
/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/_dtypes.py:1051: UserWarning: Observation array([0., 0., 2.]) is outside observation_space Box(-inf, inf, (3,), float32)
  warnings.warn(
Traceback (most recent call last):
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/examples/torch/multi_env_CL.py", line 197, in <module>
    CL_point_env()
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/experiment/experiment.py", line 369, in __call__
    result = self.function(ctxt, **kwargs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/examples/torch/multi_env_CL.py", line 194, in CL_point_env
    trainer.train(n_epochs=num_epochs, batch_size=batch_size)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/trainer.py", line 396, in train
    average_return = self._algo.train(self)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/algos/CLMeta.py", line 303, in train
    self._obtain_samples(trainer, epoch, self._num_steps_prior,
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/algos/CLMeta.py", line 557, in _obtain_samples
    paths = trainer.obtain_samples(itr, num_samples_per_batch,
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/trainer.py", line 254, in obtain_samples
    eps = self.obtain_episodes(itr, batch_size, agent_update, env_update)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/trainer.py", line 218, in obtain_episodes
    episodes = self._sampler.obtain_samples(
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/sampler/local_sampler.py", line 160, in obtain_samples
    batch = worker.rollout()
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/algos/pearl.py", line 776, in rollout
    while not self.step_episode():
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/algos/pearl.py", line 746, in step_episode
    a, agent_info = self.agent.get_action(self._prev_obs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/policies/cl_context_conditioned_policy.py", line 217, in get_action
    action, info = self._policy.get_action(obs_in)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/policies/stochastic_policy.py", line 47, in get_action
    action, agent_infos = self.get_actions(observation)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/policies/stochastic_policy.py", line 95, in get_actions
    dist, info = self.forward(observations)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/policies/tanh_gaussian_mlp_policy.py", line 102, in forward
    dist = self._module(observations)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/modules/gaussian_mlp_module.py", line 171, in forward
    mean, log_std_uncentered = self._get_mean_and_log_std(*inputs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/modules/gaussian_mlp_module.py", line 572, in _get_mean_and_log_std
    return self._shared_mean_log_std_network(*inputs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/modules/multi_headed_mlp_module.py", line 149, in forward
    x = layer(x)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/container.py", line 217, in forward
    input = module(input)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/_functions.py", line 418, in forward
    return self.module(input_value)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/activation.py", line 103, in forward
    return F.relu(input, inplace=self.inplace)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/functional.py", line 1500, in relu
    result = torch.relu(input)
KeyboardInterrupt
Traceback (most recent call last):
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/examples/torch/multi_env_CL.py", line 197, in <module>
    CL_point_env()
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/experiment/experiment.py", line 369, in __call__
    result = self.function(ctxt, **kwargs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/examples/torch/multi_env_CL.py", line 194, in CL_point_env
    trainer.train(n_epochs=num_epochs, batch_size=batch_size)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/trainer.py", line 396, in train
    average_return = self._algo.train(self)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/algos/CLMeta.py", line 303, in train
    self._obtain_samples(trainer, epoch, self._num_steps_prior,
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/algos/CLMeta.py", line 557, in _obtain_samples
    paths = trainer.obtain_samples(itr, num_samples_per_batch,
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/trainer.py", line 254, in obtain_samples
    eps = self.obtain_episodes(itr, batch_size, agent_update, env_update)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/trainer.py", line 218, in obtain_episodes
    episodes = self._sampler.obtain_samples(
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/sampler/local_sampler.py", line 160, in obtain_samples
    batch = worker.rollout()
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/algos/pearl.py", line 776, in rollout
    while not self.step_episode():
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/algos/pearl.py", line 746, in step_episode
    a, agent_info = self.agent.get_action(self._prev_obs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/policies/cl_context_conditioned_policy.py", line 217, in get_action
    action, info = self._policy.get_action(obs_in)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/policies/stochastic_policy.py", line 47, in get_action
    action, agent_infos = self.get_actions(observation)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/policies/stochastic_policy.py", line 95, in get_actions
    dist, info = self.forward(observations)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/policies/tanh_gaussian_mlp_policy.py", line 102, in forward
    dist = self._module(observations)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/modules/gaussian_mlp_module.py", line 171, in forward
    mean, log_std_uncentered = self._get_mean_and_log_std(*inputs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/modules/gaussian_mlp_module.py", line 572, in _get_mean_and_log_std
    return self._shared_mean_log_std_network(*inputs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/modules/multi_headed_mlp_module.py", line 149, in forward
    x = layer(x)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/container.py", line 217, in forward
    input = module(input)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/paulnitschke/Desktop/projects/geo_meta_rl/garage/torch/_functions.py", line 418, in forward
    return self.module(input_value)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/modules/activation.py", line 103, in forward
    return F.relu(input, inplace=self.inplace)
  File "/Users/paulnitschke/miniconda3/envs/env_geo_meta_rl/lib/python3.9/site-packages/torch/nn/functional.py", line 1500, in relu
    result = torch.relu(input)
KeyboardInterrupt
